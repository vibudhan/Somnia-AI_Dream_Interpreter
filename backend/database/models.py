"""
Database Models - SQLAlchemy models for PostgreSQL
"""

from sqlalchemy import Column, Integer, String, DateTime, Float, Text, Boolean, ForeignKey, JSON
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship
from datetime import datetime
import uuid

Base = declarative_base()

class Dream(Base):
    """Dream entries from users"""
    __tablename__ = "dreams"
    
    id = Column(String, primary_key=True, default=lambda: str(uuid.uuid4()))
    user_id = Column(String, nullable=False, index=True)
    dream_text = Column(Text, nullable=False)
    language = Column(String(5), default="en")
    source = Column(String(20), default="text")  # text, audio, etc.
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Relationships
    interpretations = relationship("Interpretation", back_populates="dream")
    feedback = relationship("Feedback", back_populates="dream")

class Interpretation(Base):
    """Dream interpretations generated by AI"""
    __tablename__ = "interpretations"
    
    id = Column(String, primary_key=True, default=lambda: str(uuid.uuid4()))
    dream_id = Column(String, ForeignKey("dreams.id"), nullable=False)
    symbols_data = Column(JSON)  # Extracted symbols and meanings
    psychological_insights = Column(JSON)  # List of insights
    emotional_tone = Column(String(50))
    full_interpretation = Column(Text)
    confidence_score = Column(Float)
    processing_time_ms = Column(Integer)
    model_version = Column(String(50), default="v1.0")
    created_at = Column(DateTime, default=datetime.utcnow)
    
    # Relationships
    dream = relationship("Dream", back_populates="interpretations")
    feedback = relationship("Feedback", back_populates="interpretation")

class Feedback(Base):
    """User feedback on interpretations"""
    __tablename__ = "feedback"
    
    id = Column(String, primary_key=True, default=lambda: str(uuid.uuid4()))
    dream_id = Column(String, ForeignKey("dreams.id"), nullable=False)
    interpretation_id = Column(String, ForeignKey("interpretations.id"), nullable=False)
    user_id = Column(String, nullable=False)
    feedback_type = Column(String(20))  # positive, negative, clarification
    feedback_text = Column(Text)
    user_corrections = Column(JSON)  # Structured corrections from user
    rating = Column(Integer)  # 1-5 rating
    is_processed = Column(Boolean, default=False)
    created_at = Column(DateTime, default=datetime.utcnow)
    
    # Relationships
    dream = relationship("Dream", back_populates="feedback")
    interpretation = relationship("Interpretation", back_populates="feedback")

class ConversationHistory(Base):
    """Chat history for follow-up conversations"""
    __tablename__ = "conversation_history"
    
    id = Column(String, primary_key=True, default=lambda: str(uuid.uuid4()))
    interpretation_id = Column(String, ForeignKey("interpretations.id"), nullable=False)
    user_id = Column(String, nullable=False)
    message_type = Column(String(10))  # user, assistant
    message_content = Column(Text, nullable=False)
    context_data = Column(JSON)
    created_at = Column(DateTime, default=datetime.utcnow)

class UserSession(Base):
    """User session tracking"""
    __tablename__ = "user_sessions"
    
    id = Column(String, primary_key=True, default=lambda: str(uuid.uuid4()))
    user_id = Column(String, nullable=False)
    session_start = Column(DateTime, default=datetime.utcnow)
    session_end = Column(DateTime)
    dreams_analyzed = Column(Integer, default=0)
    feedback_given = Column(Integer, default=0)
    conversation_turns = Column(Integer, default=0)

class SymbolUsage(Base):
    """Track symbol usage for analytics"""
    __tablename__ = "symbol_usage"
    
    id = Column(String, primary_key=True, default=lambda: str(uuid.uuid4()))
    symbol_name = Column(String(100), nullable=False, index=True)
    category = Column(String(50))
    usage_count = Column(Integer, default=1)
    total_confidence = Column(Float, default=0.0)
    average_confidence = Column(Float, default=0.0)
    last_used = Column(DateTime, default=datetime.utcnow)
    created_at = Column(DateTime, default=datetime.utcnow)